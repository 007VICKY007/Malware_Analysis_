import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
import joblib
import os
import numpy as np

# Load the dataset
data = pd.read_csv(r'F:\Cyber_Ai-main\Malware detection\Malware dataset.csv')

# Display the first few rows of the dataset to understand its structure
print("Dataset preview:")
print(data.head())

# Check for missing values
print("\nMissing values in each column:")
print(data.isnull().sum())

# Preprocess the data
# Convert non-numeric columns to numeric using Label Encoding or One-Hot Encoding

# Encoding all object-type columns (like 'hash', 'malware', etc.) to numeric values
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Display the dataset after encoding
print("\nDataset after encoding:")
print(data.head())

# Define features and labels
X = data.iloc[:, :-1]  # Features: All columns except the last one
y = data.iloc[:, -1]   # Labels: The last column

# Check the shapes of features and labels
print("\nShape of features (X):", X.shape)
print("Shape of labels (y):", y.shape)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the model
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
print("\nTraining the model...")
model.fit(X_train, y_train)

# Make predictions on the test set
print("\nMaking predictions on the test set...")
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Output the results
print(f"\nAccuracy: {accuracy * 100:.2f}%")
print("Classification Report:")
print(report)

# Save the trained model for future use
model_path = 'malware_detection_model.pkl'
print(f"\nSaving the trained model to {model_path}...")
joblib.dump(model, model_path)

# Example: Load the model for future predictions
# loaded_model = joblib.load('malware_detection_model.pkl')

# Feature extraction function (placeholder)
def extract_features(file_path):
    """
    This is a placeholder function to extract features from a file.
    You need to replace this with your actual feature extraction logic.
    """
    file_size = os.path.getsize(file_path)
    return np.array([file_size])

# Function to scan a folder for malware
def scan_folder(folder_path, model):
    """
    Scans the specified folder for malware using the trained model.
    """
    print(f"\nScanning folder: {folder_path}")
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            # Extract features from the file
            features = extract_features(file_path).reshape(1, -1)
            # Predict if the file is malware or clean
            prediction = model.predict(features)
            if prediction == 1:
                print(f"Malware detected: {file_path}")
            else:
                print(f"File is clean: {file_path}")

# Example usage of scanning a folder (replace with the actual folder path)
# folder_to_scan = r'path_to_scan'
# scan_folder(folder_to_scan, model)

print("\nProgram finished.")
