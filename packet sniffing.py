import pandas as pd
import numpy as np
import joblib
import scapy.all as scapy
import gradio as gr
import threading
import datetime

# Load the trained model and feature names
model = joblib.load('malware_detection_model.pkl')
feature_names = joblib.load('feature_names.pkl')

# Expected number of features (based on your model)
expected_feature_count = len(feature_names)

# Global variable to keep track of the current display value
current_log = ""

# Function to extract features from packets
def extract_packet_features(packet):
    features = []

    # Example of adding numerical features:
    features.append(len(packet))  # Packet length

    # Add more numerical features here, ensuring the total count matches expected_feature_count

    # If fewer features are extracted, pad the rest with zeros
    if len(features) < expected_feature_count:
        features.extend([0] * (expected_feature_count - len(features)))

    return np.array(features)

# Callback function to process packets and update the frontend
def process_packet(packet, update_fn):
    features = extract_packet_features(packet)
    features_df = pd.DataFrame([features], columns=feature_names)

    # Predict using the loaded model
    prediction = model.predict(features_df)

    # Log the result and update the Gradio interface
    if prediction[0] == 1:
        src_ip = packet[scapy.IP].src if packet.haslayer(scapy.IP) else "Unknown"
        result = f"Malware detected in packet from {src_ip} at {datetime.datetime.now()}"
        update_fn(result)

# Function to start sniffing packets
def start_sniffing(update_fn):
    print("Starting packet sniffing...")
    scapy.sniff(prn=lambda packet: process_packet(packet, update_fn), store=0)

# Function to update the Gradio interface with new results
def update_display(result):
    global current_log
    current_log += "\n" + result
    result_display.update(value=current_log)

# Gradio interface function for real-time packet sniffing
def live_sniffing():
    global result_display
    result_display = gr.Textbox(label="Packet Sniffing Log", placeholder="Malware detection log will appear here...", lines=20)
    
    sniffing_thread = threading.Thread(target=start_sniffing, args=(update_display,))
    sniffing_thread.start()

    return result_display

# Main function to run everything
if __name__ == "__main__":
    # Create Gradio Interface for packet sniffing
    sniff_interface = gr.Interface(fn=live_sniffing, inputs=[], outputs="text", title="Live Packet Sniffing")
    
    # Launch the Gradio interface
    sniff_interface.launch(share=True)
